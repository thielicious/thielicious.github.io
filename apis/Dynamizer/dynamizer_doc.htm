<script>  
	lnkJump($('html, body'),800);
	stay();
	var lnks = new TxtLnk('section.content','apis/eMM/');
	lnks.clk('dynamizer',['demo','lic','clog','dls']);
</script>
<article>
	<header class="article_h">
		<h1>Dynamizer</h1>
		<h3 class="subheadline">Documentation</h3>
	</header>
	<br>
	<ul class="topics">
		<li>&#187 <a class="txt_lnk" href="#intro">Introduction</a></li>
		<li>&#187 <a class="txt_lnk" href="#setup">Setup Information</a></li>
		<li>&#187 <a class="txt_lnk" href="#config">Configuration</a></li>
		<li>&#187 <a class="txt_lnk" href="#usage">Usage</a></li>
		<li>&#187 <a class="txt_lnk" href="#demos">Examples</a></li>
	</ul>
	<br><br><br>
	<h3 id="intro">INTRODUCTION</h3><br><br>
	<p class="text">
		This API is licensed under the MIT, see <a class="txt_lnk dynamizer_lic jump" href="#dynamizer_lic">LICENSE</a><br>
		</br>
		<strong>Dynamizer</strong> is a simple manager for creating dynamic websites. Each page that is applied by this API is devided in sections which is easily maintainable by replacing its content. It has an output buffer and links to sub pages are defined by the GET method. It is a standard structure which is ready for improvements and additional features for any future goals. 
		<br>
	</p>
</article>
<br>
<article>
	<h3 id="setup">SETUP INFORMATION</h3><br><br>
	<p class="text">
		Dynamizer requires no frameworks or any libraries. Recommended PHP version is atleast <strong>7.09</strong>. But it comes with a class loader called aLoad, it's one of my repositories at GitHub. It is already added to this API. This extension is not necessary but recommended as it automatically loads all classes for this API.<br>
		<br>
		<strong>1.</strong> Click the link below to land on the download site of <strong>Dynamizer</strong> and choose your option.<br>
		<br>
		- <a class="txt_lnk dynamizer_dls jump" href="#dynamizer_dls">Dynamizer API</a><br>
		<br>
		For an overview of all versions and bug fixes please check the <a class="txt_lnk dynamizer_clog jump" href="#dynamizer_clog">CHANGELOG</a>.<br>
		<br><br>
		<strong>2.</strong> After download/clone make sure you setup a <strong>Namespace</strong> so that no conflicts occur depending on your own code you could already have.<br>
		<br>
		For this purpose, open the class <strong>aLoad</strong> (aload.class.php) inside the API folder and create an encapsulation around it. The Namespace Dynamizer is pre-defined, but if you wish to change this then simply do so.<br>
		<div id="code">
		<pre>
		<code>
	namespace Dynamizer;
	class aLoad { ... }	
	$aload = new \Dynamizer\aLoad();
	\Dynamizer\aLoad::register();
		</code>
		</pre>
		</div>
		<strong>3.</strong> Then you have to include the aload class that initializes the eMM class pack in your PHP page.<br>
		<div id="code">
		<pre>
		<code>
	&lt;?php
	  require_once "aLoad.class.php";
	?>
		</code>
		</pre>
		</div>
		This is the basic implementation without any additional configuration. You have to adjust the default configuration as explained below.<br>
	</p>	
</article>
<br>
<article>
	<h3 id="config">CONFIGURATION</h3><br><br>
	<p class="text">
		Dyanmizer consists of an abstract main class and two derived modules <strong>Links</strong> and <strong>Sections</strong>:<br>
		&#187; <strong>Link</strong> defines the URLs between sub pages per GET method<br>
		&#187; <strong>Section</strong> displays the content individually and dynamically<br>
		<br>
		<div id="code">
		<pre>
		<code>
	require_once "scr/aLoad.class.php";
	
	$meta = new Section("meta.php");
	$header = new Section("header.php");
	$content = new Section("content.php");
	$footer = new Section("footer.php");
		</code>
		</pre>
		</div>
		<br>
		Optionally, default configuration for the newsletter using News module:<br>
		<div id="code">
		<pre>
		<code>
	require_once "classes/aLoad.class.php";

	if (isset($_POST["send"])) {
	  $news = new News();
	  $news->debugMode("on");
	  $news->signature(
	    "------Company Name------
	    &lt;br>Your Name&lt;br>
	    www.example.com&lt;br>
	    ---------------------"
	  );
	  $news->emailHeader("From: Company - Notification");
	  $news->emailDB("localhost", "root", "", "emails");
	  $news->send();
	}
		</code>
		</pre>
		</div>
		A live demonstration of both modules can be viewed here: <a class="txt_lnk emm_demo jump" href="#emm_demo">EXAMPLES</a>.<br>
		<br><br>
		<h4>Methods</h4><br>
		<h4>*::debugMode(status)<br><span class="def_conf">default: 'on'</span></h4><br>
		For debugging the form data and mail content will be sent directly to the screen for investigation and testing purposes.<br>
		   <li>&#187 choose <strong>'on'</strong> to enable the debugger, mails will not be sent.</li> 
		   <li>&#187 choose <strong>'off'</strong> if you wish to turn it off and make it able to send.</li>
		<br><br>
		<h4>*::emailHeader(header-text)<br><span class="def_conf">optional but recommended</span></h4><br>
		The header of the email needs to be defined for recognization. (It is not the subject).<br>
		<br><br>
		<h4>*::send()<br><span class="def_conf">required</span></h4><br>
		Executes the classical mailing procedure. If debugMode is 'on', it's then sent to the screen.<br>
		<br><br>
		<h4>*::getName()<br><span class="def_conf">optional</span></h4><br>
		Use this method to mention the user's name of the current eMail address.<br>
		<br><br>
		<h4>Request::method(method)<br><span class="def_conf">default: 'post'</span></h4><br>
		When method is set to <strong>'json'</strong>, it will be send to the code above which is placed in a separated PHP file. AJAX will come into play, more to this jump to <a class="txt_lnk" href="#usage">Usage</a><br>
			<li>&#187 <strong>'post'</strong> enables you to send POST data to the header.</li> 
		    <li>&#187 <strong>'json'</strong> enables you to use AJAX without refreshing the page.</li>
		<br><br>
		<h4>Request::recipient(email address)<br><span class="def_conf">default: 'admin@example.com'</span></h4><br>
		Mail content will be sent to this email address.<br>
		<br><br>
		<h4>News::signature(signature)<br><span class="def_conf">optional</span></h4><br>
		Defines a signature as footer in the email content.<br>
		<br><br>
		<h4>News::emailDB(server, user, password, database)<br><span class="def_conf">required</span></h4><br>
		Connection data to the SQL database that fetches all email addresses from registered users.<br>
	</p>	
</article>
<br>
<article>
	<h3 id="usage">USAGE</h3><br><br>
	<p class="text">
		The Usage of it is obviously treating it as a simple contact form and submit. This API handles a certain amount of input fields tagged with the <strong>name</strong> attribute:<br>
	</p>
	<br>
	<div class="table-wrap">
		<ul class="table">
			<li style="clear:both">subject</li>
			<li>content</li>
			
			<li style="clear:both">firstname</li>
			<li>middlename</li>
			<li>lastname</li>
			<li>title</li>
			
			<li style="clear:both">birth</li>

			<li style="clear:both">address</li>
			<li>location</li>
			<li>country</li>
			<li>zip</li>
			<li>bic</li>
			
			<li style="clear:both">phone</li>
			<li>mobile</li>
			<li>fax</li>
			<li>email</li>
			
			<li style="clear:both">company</li>
			<li>website</li>
			<li>facebook</li>
			<li>twitter</li>
		</ul>
	</div>
	<p class="text" style="clear:both">
		<br><br>
		The name attribute must contain any of the values above in order to apply and send.<br>
		<br><br>
		<h4>Example code with a contact form</h4>
		<div id="code">
		<pre>
		<code>
	&lt;form action="&lt;?php $_SERVER["PHP_SELF"]; ?>" method="POST">
	  &lt;input type="text" name="name" required />
	  &lt;input type="email" name="email" pattern="[^@]*@[^@]*" required />&lt;br>
	  &lt;input type="text" name="subject" required />&lt;br>
	  &lt;textarea name="content" required>&lt;/textarea>&lt;br>
	  &lt;input type="submit" name="send" value="Send"/>&lt;br>
	  &lt;span class="resp">
	  
	    &lt;?php
	      require_once "classes/aLoad.class.php";	
		  
	      if (isset($_POST["send"])) {
	        $request = new Request();
	        $request->debugMode("off");
	        $request->method("post");
	        $request->recipient("john.doe@example.net");
	        $request->emailHeader("From: Customer enquiry from ".$request->getName());
	        $request->send();
	      }
	    ?>
		
	  &lt;/span>
	&lt;/form>
		</code>
		</pre>
		</div>
		<br>
		<h4>Same example code using AJAX/JSON</h4>
		<div id="code">
		<pre>
		<code>
	&lt;form action="&lt;?php $_SERVER["PHP_SELF"]; ?>" method="POST">
	  &lt;input type="text" name="name" required />
	  &lt;input type="email" name="email" pattern="[^@]*@[^@]*" required />&lt;br>
	  &lt;input type="text" name="subject" required />&lt;br>
	  &lt;textarea name="content" required>&lt;/textarea>&lt;br>
	  &lt;input type="submit" name="send" value="Send"/>&lt;br>
	  &lt;span class="resp">&lt;/span>
	&lt;/form>
	
	&lt;script>
	
	  $(() {
	    $('form').eMM({ 
	      resp    : '.result', 
	      php     : 'json.inc.php'
	    });
	  });
	  
	&lt;/script>
		</code>
		</pre>
		</div>
		This snippet requires the JavaScript library jQuery: <a class="txt_lnk" target="_blank" href="https://code.jquery.com/jquery-3.1.1.min.js">jQuery v3.10</a><br>
		With AJAX you simply append the jQuery PlugIn <strong>.eMM()</strong> to your form tag, the rest will work on its own and skips refreshing the page. The <a class="txt_lnk" href="https://github.com/thielicious/eMM/blob/master/eMM.js">sourcecode</a> of it is on the same repository at GitHub. After you cloned the Repo, link this script on top of your page, if you would like to stringify data into JSON. Note that you have to link this PlugIn below the jquery link:<br>
		<div id="code">
		<pre>
		<code>
	&lt;script src="jquery-3.11.min.js"/>&lt;/script>
	&lt;script src="eMM.js"/>&lt;/script>
		</code>
		</pre>
		</div>
		<br>
		It uses an AJAX request, serializes form data to JSON and sends it to an extern PHP file. The PHP file contains the PHP code seen below.<br>
		<div id="code">
		<pre>
		<code>
	&lt;?php

	  require_once "classes/aLoad.class.php";

	  if (isset($_POST["send"])) {
	    if ($_POST["send"] != "Send") {
	      $request = new Request();
	      $request->debugMode("on");
	      $request->method("json");
	      $request->recipient("michel.thiel@gmx.net");
	      $request->emailHeader("From: THIELICIOUS - Customer enquiry from ".$request->getName());
	      $request->send();
	    }
	  }

	?>
		</code>
		</pre>
		</div>
		<br>
		<h4>PlugIn Parameters</h4><br>
		<ul>
			<li>&#187 <strong>resp</strong><br>
			target HTML element where the response from PHP appears.</li>
			<li>&#187 <strong>php</strong><br>
			PHP file containing the code, see example below:</li>
		</ul>
	</p>
</article>
<br>
<article>
	<h3 id="demos">EXAMPLES (<i style="font-size: 0.8em">code.runnable.com</i>)</h3><br><br>
	<p class="text">
		Please head to <a class="txt_lnk emm_demo jump" href="#emm_demo">EXAMPLES</a> for a detailed overview of demos.<br>
	</p>
</article>